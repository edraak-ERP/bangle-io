---
description: 
globs: 
alwaysApply: true
---


# Project Instructionss

Tech Stack

- React

Build the note-taking web app per these guidelines.

- TypeScript
- Vite
- Vitest
- Playwright
- TailwindCSS
- ShadCN
- Jotai for state management

## Project Structure

1. **core**: Business logic.
2. **platform**: Platform-specific abstractions (e.g., IndexedDB for browser).
3. **shared**: Shared code, types, constants.
4. **tooling**: Build tools and scripts.
5. **ui**: React components, use shared code.
6. **js-lib**: Independent libraries.

## Guidelines

- Write complete code; avoid shortcuts.
- Keep code comments unless explicitly instructed.

## WsPath Format

`wsPath` defines file or directory paths in the workspace:

[ws-path.ts](mdc:packages/shared/ws-path/src/ws-path.ts)

- **File**: `<workspaceName>:<filePath>` (e.g., `myWorkspace:myNote.md`)
- **Directory**: `<workspaceName>:<dirPath>` (e.g., `myWorkspace:myDir/mySubDir`)

### Components:

- `workspaceName`: Workspace name.
- `filePath`: File path with extension.
- `dirPath`: Directory path.

## Commands

Bangle uses commands to perform actions. The commands serializable config is in the `@bangle.io/commands` package and the command handlers are in the `@bangle.io/command-handlers` package.

Below is a command config:

```
 {
    id: 'command::ui:toggle-sidebar',
    title: 'Toggle Sidebar',
    keywords: ['toggle', 'sidebar'],
    dependencies: {
      services: ['workbenchState'],
    },
    omniSearch: true,
    keybindings: ['meta', '\\'],
    args: null,
  }
```

Example file for command config [ui-commands.ts](mdc:packages/shared/commands/src/ui-commands.ts) for UI, for workspace [workspace-ops-service.ts](mdc:packages/core/service-core/src/workspace-ops-service.ts)



Below is an example of a command handler

```
  c('command::ui:toggle-sidebar', ({ workbenchState }, _, key) => {
    const { store } = getCtx(key);
    store.set(workbenchState.$sidebarOpen, (prev) => !prev);
  })
```

Example file for implementation of config [ui-command-handlers.ts](mdc:packages/core/command-handlers/src/ui-command-handlers.ts)

### Services

Services encapsulate the core logic, we have following directories
- service-core 
  - can depend on platform services
  - example [navigation-service.ts](mdc:packages/core/service-core/src/navigation-service.ts) [workspace-service.ts](mdc:packages/core/service-core/src/workspace-service.ts) , Editor service [editor-service.ts](mdc:packages/core/service-core/src/editor-service.ts)

- service-platform
    - CANNOT depend on service-core or any other higher level.
    - Can only depend on other platform services.
    - Example [memory-database.ts](mdc:packages/platform/service-platform/src/memory-database.ts) , [file-storage-indexeddb.ts](mdc:packages/platform/service-platform/src/file-storage-indexeddb.ts)



Each service should only depend on another service if it is absolutely needed, otherwise take advantage of config constructor param to pass in a callback for a decoupled way of making a service depend on another. 